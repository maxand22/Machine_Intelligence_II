cor(t(s),t(vvv))
setwd("/Users/maxand22/Google Drive/Humboldt/4. Semester/Machine Intelligence II/Machine_Intelligence_II/hw5")
library(audio)
library(ggplot2)
#For every 1000th update w function
lr_func <- function(x){
result <- 0
for(i in 1:2){
for(j in 1:2){
result <- result + x[i,j]^2
}
}
return(result)
}
# logistic function
f = function(x){
return(1/(1+exp(-x)))
}
#1.a
sound1 <- read.csv("/sound1.dat", header = FALSE)
#qplot(1:nrow(sound1), sound1)
source1 <- audioSample(t(as.matrix(sound1)), rate=8192)
#play(source1)
sound2 <- read.csv("/sound2.dat", header = FALSE)
#qplot(1:nrow(sound2), sound2)
source2 <- audioSample(t(as.matrix(sound2)), rate=8192)
#play(source2)
#1.b
set.seed(1234)
s <- t(as.matrix(data.frame(sound1, sound2)))
#qplot(1:ncol(s), s[1,])
a <- matrix(runif(4, max = 1, min = 0), 2, 2)
x <- a%*%s
#x = t(scale(t(x), center = TRUE, scale = FALSE))
#qplot(1:ncol(x), x[1,])
sound1 <- read.csv("sound1.dat", header = FALSE)
sound1 <- read.csv("sound1.dat", header = FALSE)
#qplot(1:nrow(sound1), sound1)
source1 <- audioSample(t(as.matrix(sound1)), rate=8192)
#play(source1)
sound2 <- read.csv("sound2.dat", header = FALSE)
#qplot(1:nrow(sound2), sound2)
source2 <- audioSample(t(as.matrix(sound2)), rate=8192)
#play(source2)
set.seed(1234)
s <- t(as.matrix(data.frame(sound1, sound2)))
#qplot(1:ncol(s), s[1,])
a <- matrix(runif(4, max = 1, min = 0), 2, 2)
x <- a%*%s
qplot(1:ncol(x), x[1,])
qplot(1:ncol(x), x[2,])
x_permute <- x[,sample(ncol(x))]
t = 1
eta_zero = 0.1
alpha = 1
set.seed(123)
w <- matrix(runif(4, max = 1, min = 0), 2, 2)
for(t in 1:18000){
eta_t = eta_zero/t
X = x[,alpha]
w = w + eta_t*(t(solve(w)) + (1 - 2*f(w%*%cbind(X, X)))*t(cbind(X,X)))
if(alpha %% 1000 == 0){
lr_dev[alpha/1000,1] <- lr_func(eta*(t(solve(W_r)) + f1(W_r%*%cbind(x, x)*t(cbind(x,x)))))
}
alpha = alpha + 1
if(alpha == 18000){
alpha = 1
}
}
t = 1
eta_zero = 0.1
alpha = 1
set.seed(123)
w <- matrix(runif(4, max = 1, min = 0), 2, 2)
for(t in 1:18000){
eta_t = eta_zero/t
X = x[,alpha]
w = w + eta_t*(t(solve(w)) + (1 - 2*f(w%*%cbind(X, X)))*t(cbind(X,X)))
if(alpha %% 1000 == 0){
lr_dev[alpha/1000,1] <- lr_func(eta_t*(t(solve(W_r)) + f1(W_r%*%cbind(x, x)*t(cbind(x,x)))))
}
alpha = alpha + 1
if(alpha == 18000){
alpha = 1
}
}
# for random initialization of weights --> see 1.f)
t = 1
eta_zero = 0.1
alpha = 1
set.seed(123)
w <- matrix(runif(4, max = 1, min = 0), 2, 2)
for(t in 1:18000){
eta_t = eta_zero/t
X = x[,alpha]
w = w + eta_t*(t(solve(w)) + (1 - 2*f(w%*%cbind(X, X)))*t(cbind(X,X)))
if(alpha %% 1000 == 0){
lr_dev[alpha/1000,1] <- lr_func(eta_t*(t(solve(w)) + f1(w%*%cbind(X, X)*t(cbind(X,X)))))
}
alpha = alpha + 1
if(alpha == 18000){
alpha = 1
}
}
# for random initialization of weights --> see 1.f)
t = 1
eta_zero = 0.1
alpha = 1
set.seed(123)
w <- matrix(runif(4, max = 1, min = 0), 2, 2)
for(t in 1:18000){
eta_t = eta_zero/t
X = x[,alpha]
w = w + eta_t*(t(solve(w)) + (1 - 2*f(w%*%cbind(X, X)))*t(cbind(X,X)))
if(alpha %% 1000 == 0){
lr_dev[alpha/1000,1] <- lr_func(eta_t*(t(solve(w)) + f(w%*%cbind(X, X)*t(cbind(X,X)))))
}
alpha = alpha + 1
if(alpha == 18000){
alpha = 1
}
}
t = 1
eta_zero = 0.1
alpha = 1
set.seed(123)
w <- matrix(runif(4, max = 1, min = 0), 2, 2)
lr_dev <- matrix(NA, nrow = 18,ncol = 2)
for(t in 1:18000){
eta_t = eta_zero/t
X = x[,alpha]
w = w + eta_t*(t(solve(w)) + (1 - 2*f(w%*%cbind(X, X)))*t(cbind(X,X)))
if(alpha %% 1000 == 0){
lr_dev[alpha/1000,1] <- lr_func(eta_t*(t(solve(w)) + f(w%*%cbind(X, X)*t(cbind(X,X)))))
}
alpha = alpha + 1
if(alpha == 18000){
alpha = 1
}
}
vvv = w%*%x
w
solve(a)
cor(t(s),t(vvv))
sound1_regular <- audioSample(t(as.matrix(vvv[1,])), rate = 8192)
qplot(1:ncol(vvv), vvv[1,])
play(sound1_regular)
qplot(1:ncol(vvv), vvv[2,])
play(sound2_regular)
sound2_regular <- audioSample(t(as.matrix(vvv[2,])), rate = 8192)
play(sound2_regular)
for(t in 1:18000){
eta_t = eta_zero/t
X = x[,alpha]
w = w + eta_t*(((-1)*f(w%*%cbind(X, X))*(w%*%t(cbind(X,X)))) + (1 - 2*f(w%*%cbind(X, X)))*(w%*%t(cbind(X,X))))%*%w
if(alpha %% 1000 == 0){
lr_dev[alpha/1000,1] <- lr_func(eta_t*(t(solve(w)) + f1(w%*%cbind(X, X)*t(cbind(X,X)))))
}
alpha = alpha + 1
if(alpha == 18000){
alpha = 1
}
}
t = 1
eta_zero = 50
alpha = 1
set.seed(123)
w <- matrix(runif(4, max = 1, min = 0), 2, 2)
lr_dev <- matrix(NA, nrow = 18,ncol = 2)
for(t in 1:18000){
eta_t = eta_zero/t
X = x[,alpha]
w = w + eta_t*(((-1)*f(w%*%cbind(X, X))*(w%*%t(cbind(X,X)))) + (1 - 2*f(w%*%cbind(X, X)))*(w%*%t(cbind(X,X))))%*%w
if(alpha %% 1000 == 0){
lr_dev[alpha/1000,1] <- lr_func(eta_t*(t(solve(w)) + f(w%*%cbind(X, X)*t(cbind(X,X)))))
}
alpha = alpha + 1
if(alpha == 18000){
alpha = 1
}
}
vvv_natural = w%*%x
w
solve(a)
cor(t(s),t(vvv_natural))
sound1_natural <- audioSample(t(as.matrix(vvv_natural[1,])), rate = 8192)
play(sound1_natural)
qplot(1:ncol(vvv), vvv_natural[1,])
sound2_natural <- audioSample(t(as.matrix(vvv_natural[2,])), rate = 8192)
play(sound2_natural)
qplot(1:ncol(vvv), vvv_natural[2,])
#a
#Plot & Play (i) the original sounds
qplot(1:nrow(sound1), sound1)
play(source1)
qplot(1:nrow(sound2), sound2)
play(source2)
#(ii) the mixed sources
qplot(1:ncol(x), x[1,])
x1 <- audioSample(t(as.matrix(x[1,])), rate=8192)
play(x1)
qplot(1:ncol(x), x[2,])
x2 <- audioSample(t(as.matrix(x[2,])), rate=8192)
play(x2)
#(ii) the mixed sources (after the data permutation)
qplot(1:ncol(x), x_permute[1,])
x1_permute <- audioSample(t(as.matrix(x_permute[1,])), rate=8192)
play(x1_permute)
qplot(1:ncol(x), x_permute[2,])
x2_permute <- audioSample(t(as.matrix(x_permute[2,])), rate=8192)
play(x2_permute)
#the recovered signals (estimated sources) Ë†s = Wx using the unpermuted data.
#regular
sound1_regular <- audioSample(t(as.matrix(vvv[1,])), rate = 8192)
play(sound1_regular)
qplot(1:ncol(vvv), vvv[1,])
sound2_regular <- audioSample(t(as.matrix(vvv[2,])), rate = 8192)
play(sound2_regular)
qplot(1:ncol(vvv), vvv[2,])
library(corrplot)
corrplot(cor(t(s),t(vvv)))
corrplot(cor(t(s),t(vvv_natural)))
t = 1
eta_zero = 0.1
alpha = 1
set.seed(123)
w <- matrix(runif(4, max = 1, min = 0), 2, 2)
lr_dev1 <- matrix(NA, nrow = 18,ncol = 2)
for(t in 1:18000){
eta_t = eta_zero/t
X = x[,alpha]
w = w + eta_t*(t(solve(w)) + (1 - 2*f(w%*%cbind(X, X)))*t(cbind(X,X)))
if(alpha %% 1000 == 0){
lr_dev1[alpha/1000,1] <- lr_func(eta_t*(t(solve(w)) + f(w%*%cbind(X, X)*t(cbind(X,X)))))
}
alpha = alpha + 1
if(alpha == 18000){
alpha = 1
}
}
t = 1
eta_zero = 50
alpha = 1
set.seed(123)
w <- matrix(runif(4, max = 1, min = 0), 2, 2)
lr_dev2 <- matrix(NA, nrow = 18,ncol = 2)
for(t in 1:18000){
eta_t = eta_zero/t
X = x[,alpha]
w = w + eta_t*(((-1)*f(w%*%cbind(X, X))*(w%*%t(cbind(X,X)))) + (1 - 2*f(w%*%cbind(X, X)))*(w%*%t(cbind(X,X))))%*%w
if(alpha %% 1000 == 0){
lr_dev2[alpha/1000,1] <- lr_func(eta_t*(t(solve(w)) + f(w%*%cbind(X, X)*t(cbind(X,X)))))
}
alpha = alpha + 1
if(alpha == 18000){
alpha = 1
}
}
qplot(1:nrow(lr_dev1),lr_dev1[,1])
qplot(1:nrow(lr_dev1),lr_dev1[,1]) + geom_line()
#learning rate for regular gradient
qplot(1:nrow(lr_dev1),lr_dev1[,1]) + geom_line()
#learning rate for natural gradient
qplot(1:nrow(lr_dev2),lr_dev2[,1]) + geom_line()
t = 1
eta_zero = 50
alpha = 1
set.seed(123)
w <- matrix(runif(4, max = 1, min = 0), 2, 2)
lr_dev2 <- matrix(NA, nrow = 18,ncol = 2)
for(t in 1:18000){
eta_t = eta_zero/t
X = x[,alpha]
w = w + eta_t*(((-1)*f(w%*%cbind(X, X))*(w%*%t(cbind(X,X)))) + (1 - 2*f(w%*%cbind(X, X)))*(w%*%t(cbind(X,X))))%*%w
if(alpha %% 1000 == 0){
lr_dev2[alpha/1000,1] <- lr_func(eta_t*(t(solve(w)) + f(w%*%cbind(X, X)*t(cbind(X,X)))))
}
alpha = alpha + 1
if(alpha == 18000){
alpha = 1
}
}
qplot(1:nrow(lr_dev2),lr_dev2[,1]) + geom_line()
View(lr_dev1)
x1_d <- density(x[1,])
plot(x1_d)
x1_d <- density(x[1,])
qplot(x1_d)
x1_d <- density(x[1,])
ggplot(x1_d)
x1_d <- density(x[1,])
plot(x1_d)
x2_d <- density(x[2,])
plot(x2_d)
x = t(scale(t(x), center = TRUE, scale = FALSE))
x1_d <- density(x[1,])
plot(x1_d)
x2_d <- density(x[2,])
plot(x2_d)
vvv1_d <- density(vvv[1,])
plot(vvv1_d)
vvv2_d <- density(vvv[2,])
plot(vvv2_d)
s1_d <- density(s[1,])
plot(s1_d)
s2_d <- density(s[2,])
plot(s2_d)
plot(s1_d)
plot(s2_d)
plot(1/(1+exp(-x)))
plot(1/(1+exp(-1)))
plot((1/(1+exp(-1))))
library(audio)
library(ggplot2)
setwd("/Users/maxand22/Google Drive/Humboldt/4. Semester/Machine Intelligence II/Machine_Intelligence_II/hw5")
s1 = read.table("hw5/sound1.dat", header=FALSE)
s2 = read.table("hw5/sound2.dat", header=FALSE)
S = t(as.matrix(data.frame(s1,s2)))
plot(1:18000, s1$V1, type = 'l')
plot(1:18000, s2$V1, type = 'l')
play(audioSample(t(as.matrix(s1)), rate = 8192))
play(audioSample(t(as.matrix(s2)), rate = 8192))
setwd("/Users/maxand22/Google Drive/Humboldt/4. Semester/Machine Intelligence II/Machine_Intelligence_II/")
s1 = read.table("hw5/sound1.dat", header=FALSE)
s2 = read.table("hw5/sound2.dat", header=FALSE)
S = t(as.matrix(data.frame(s1,s2)))
plot(1:18000, s1$V1, type = 'l')
plot(1:18000, s2$V1, type = 'l')
set.seed(1234)
A = matrix(runif(4, 0, 1), nrow = 2)
X = A%*%S
X_perm = X[,sample(ncol(X))]
cor(S[1,], X[1,])
cor(S[1,], X[2,])
cor(S[2,], X[1,])
cor(S[2,], X[2,])
X[1,] = X[1,] - mean(X[1,])
X[2,] = X[2,] - mean(X[2,])
round(rowMeans(X), 8)
set.seed(123)
W = matrix(runif(4, 0, 1), ncol = 2)
f = function(x){
return(1/(1+exp(-x)))
}
ggplot(data.frame(x = c(-5, 5)), aes(x)) + stat_function(fun = f)
t = 1
eta_zero = .5
alpha = 1
set.seed(123)
W = matrix(runif(4, 0, 1), ncol = 2)
unmixing_regular = function(W, X, n_steps = 18000){
for(t in 1:n_steps){
eta_t = eta_zero/t
x = X[,alpha]
W_inv = t(solve(W))
f_wx = 1 - 2*f(W%*%cbind(x,x))
W_delta = eta_t*(W_inv + f_wx*t(cbind(x,x)))
W = W + W_delta
alpha = alpha + 1
if(alpha == n_steps){
alpha = 1
}
}
return(W)
}
W_regular = unmixing_regular(W, X)
W_regular = unmixing_regular(W, X)
S_hat = W_regular%*%X
t = 1
eta_zero = 1
alpha = 1
set.seed(123)
W = matrix(runif(4, 0, 1), ncol = 2)
unmixing_natural = function(W, X, n_steps = 18000){
d = matrix(c(0,0,0,0), ncol = 2)
for(i in 1:ncol(X)){
x = X[,i]
f_wx = 1 - 2*f(W%*%cbind(x,x))
wx = W%*%cbind(x,x)
d = d + f_wx%*%wx
}
for(t in 1:n_steps){
eta_t = eta_zero/t
x = X[,alpha]
f_wx = 1 - 2*f(W%*%cbind(x,x))
wx = W%*%cbind(x,x)
k_delta = -1/ncol(X)*d
W_delta = eta_t*((k_delta + f_wx%*%wx)%*%W)
W = W + W_delta
alpha = alpha + 1
if(alpha == n_steps){
alpha = 1
}
}
return(W)
}
W_natural = unmixing_natural(W, X)
S_hat_natural = W_natural%*%X
play(audioSample(t(as.matrix(S_hat_natural[1,])), rate = 8192))
play(audioSample(t(as.matrix(S_hat_natural[2,])), rate = 8192))
plot(1:18000, s1$V1, type = 'l')
plot(1:18000, s2$V1, type = 'l')
play(audioSample(t(as.matrix(s1)), rate = 8192))
play(audioSample(t(as.matrix(s2)), rate = 8192))
plot(1:18000, X[1,], type = 'l')
plot(1:18000, X[2,], type = 'l')
plot(1:18000, X_perm[1,], type = 'l')
plot(1:18000, X_perm[2,], type = 'l')
plot(1:18000, S_hat[1,], type = 'l')
plot(1:18000, S_hat[2,], type = 'l')
plot(1:18000, S_hat_natural[1,], type = 'l')
plot(1:18000, S_hat_natural[2,], type = 'l')
# b)
#cor regular and source
cor(S[1,], S_hat[1,])
cor(S[1,], S_hat[2,])
cor(S[2,], S_hat[1,])
cor(S[2,], S_hat[2,])
#cor natural and source
cor(S[2,], S_hat_natural[1,])
cor(S[2,], S_hat_natural[2,])
cor(S[2,], S_hat_natural[1,])
cor(S[2,], S_hat_natural[2,])
cor(S[1,], S_hat_natural[1,])
cor(S[1,], S_hat_natural[2,])
cor(S[2,], S_hat_natural[1,])
cor(S[2,], S_hat_natural[2,])
plot(1:18000, S_hat[1,], type = 'l')
plot(1:18000, X[1,], type = 'l')
plot(1:18000, X[1,], type = 'l')
plot(1:18000, X[2,], type = 'l')
plot(1:18000, s1$V1, type = 'l')
plot(1:18000, S_hat[1,], type = 'l')
plot(1:18000, S_hat[2,], type = 'l')
plot(1:18000, s2$V1, type = 'l')
cor(t(S),t(S_hat))
cor(S[2,], S_hat[1,])
#mixed
x1_d <- density(X[1,])
plot(x1_d)
x2_d <- density(X[2,])
plot(x2_d)
#unmixed regular
S_hat1_d <- density(S_hat[1,])
plot(S_hat1_d)
S_hat2_d <- density(S_hat[2,])
plot(S_hat2_d)
#unmixed natural
S_hat_natural1_d <- density(S_hat_natural[1,])
plot(S_hat_natural1_d)
S_hat_natural2_d <- density(S_hat_natural[2,])
plot(S_hat_natural2_d)
#true signals
s1_d <- density(S[1,])
plot(s1_d)
s2_d <- density(S[2,])
plot(s2_d)
convergence_speed_regular = function(W, X, n_steps = 18000){
c_rate = c()
for(t in 1:n_steps){
eta_t = eta_zero/t
x = X[,alpha]
W_inv = solve(W)
f_wx = 1 - 2*f(W%*%cbind(x,x))
W_delta = eta_t*(W_inv + f_wx*rbind(x,x))
W = W + W_delta
if(t %% 1000 == 0){
c_rate = c(c_rate, sum(W^2))
}
alpha = alpha + 1
if(alpha == n_steps){
alpha = 1
}
}
return(c_rate)
}
convergence_speed_natural = function(W, X, n_steps = 18000){
c_rate = c()
for(t in 1:n_steps){
eta_t = eta_zero/t
x = X[,alpha]
W_inv = solve(W)
f_wx = 1 - 2*f(W%*%cbind(x,x))
W_delta = eta_t*((W_inv + f_wx*rbind(x,x))%*%t(W)%*%W)
W = W + W_delta
if(t %% 1000 == 0){
c_rate = c(c_rate, sum(W^2))
}
alpha = alpha + 1
if(alpha == n_steps){
alpha = 1
}
}
return(c_rate)
}
evec = eigen(cov(t(X)))$vectors
evals = eigen(cov(t(X)))$values
X_whitened_t = t(X) %*% evec %*% diag((evals)^-0.5)
round(cor(X_whitened_t), 5)
X_whitened = t(X_whitened_t)
conv_regular = convergence_speed_regular(W, X)
conv_natural = convergence_speed_natural(W, X)
conv_regular_whitened = convergence_speed_regular(W, X_whitened)
conv_natural_whitened = convergence_speed_natural(W, X_whitened)
conv_regular
length(conv_regular)
qplot(1:length(conv_regular),conv_regular)
qplot(1:length(conv_natural),conv_regular)
qplot(1:length(conv_regular),conv_regular)
qplot(1:length(conv_natural),conv_natural)
plot(s1_d)
plot(s2_d)
