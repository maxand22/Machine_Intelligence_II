if(alpha == n_steps){
alpha = 1
}
}
return(W)
}
W_natural = unmixing_natural(W2, X)
S_hat_natural = W_natural%*%X
cor(t(S_hat_natural), t(S))
par(mfrow = c(1,2))
plot(1:18000, S_hat_natural[1,], type = 'l', main = 'unmixed bird', xlab = 't', ylab = 'value')
plot(1:18000, S_hat_natural[2,], type = 'l', main = 'unmixed halleluja', xlab = 't', ylab = 'value')
#play(audioSample(t(as.matrix(S_hat_natural[1,])), rate = 8192))
#play(audioSample(t(as.matrix(S_hat_natural[2,])), rate = 8192))
set.seed(222)
s3 <- t(matrix(rnorm(nrow(s1),0,((sd(as.matrix(s1)) + sd(as.matrix(s2)))/2)),nrow = 1))
S3 = t(as.matrix(data.frame(s1,s2,s3)))
par(mfrow=c(1,1))
plot(1:18000, s3, type = 'l', main = 'source 3 normal distributed', xlab = 't', ylab = 'value')
set.seed(1234)
A3 = matrix(runif(9, 0, 1), nrow = 3)
X3 = A3%*%S3
#centering
X3[1,] = X3[1,] - mean(X3[1,])
X3[2,] = X3[2,] - mean(X3[2,])
X3[3,] = X3[3,] - mean(X3[3,])
par(mfrow = c(2,2))
plot(1:18000, X3[1,], type = 'l', main = 'observation 1', xlab = 't', ylab = 'value')
plot(1:18000, X3[2,], type = 'l', main = 'observation 2', xlab = 't', ylab = 'value')
plot(1:18000, X3[3,], type = 'l', main = 'observation 3', xlab = 't', ylab = 'value')
# natural Gradient
t = 1
eta_t = 0.3
alpha = 1
lambda = 0.9102 #0.9102
set.seed(9991)
W3 = matrix(runif(9, 0, 1), ncol = 3)
W_natural3 = unmixing_natural(W3, X3)
S_hat_natural3 = W_natural3%*%X3
cor(t(S_hat_natural3), t(S3))
par(mfrow=c(2,2))
plot(1:18000, S_hat_natural3[1,], type = 'l', main = 's_hat bird', xlab = 't', ylab = 'value')
plot(1:18000, S_hat_natural3[2,], type = 'l', main = 's_hat halleluja', xlab = 't', ylab = 'value')
plot(1:18000, S_hat_natural3[3,], type = 'l', main = 's_hat source 3 normal distributed', xlab = 't', ylab = 'value')
#play(audioSample(t(as.matrix(S_hat_natural3[1,])), rate = 8192))
#play(audioSample(t(as.matrix(S_hat_natural3[2,])), rate = 8192))
#play(audioSample(t(as.matrix(S_hat_natural3[3,])), rate = 8192))
set.seed(666666)
st <- t(matrix(rt(nrow(s1),10),nrow = 1))
St = t(as.matrix(data.frame(s1,s2,st)))
par(mfrow=c(1,1))
plot(1:18000, st, type = 'l', main = 'source 3 t distributed', xlab = 't', ylab = 'value')
set.seed(1234)
A3 = matrix(runif(9, 0, 1), nrow = 3)
Xt = A3%*%St
Xt[1,] = Xt[1,] - mean(Xt[1,])
Xt[2,] = Xt[2,] - mean(Xt[2,])
Xt[3,] = Xt[3,] - mean(Xt[3,])
par(mfrow=c(2,2))
plot(1:18000, Xt[1,], type = 'l', main = 'observation 1', xlab = 't', ylab = 'value')
plot(1:18000, Xt[2,], type = 'l', main = 'observation 2', xlab = 't', ylab = 'value')
plot(1:18000, Xt[3,], type = 'l', main = 'observation 3', xlab = 't', ylab = 'value')
# natural Gradient
t = 1
eta_t = 0.25
alpha = 1
lambda = 0.91 #0.9102
set.seed(9991)
Wt = matrix(runif(9, 0, 1), ncol = 3)
W_naturalt = unmixing_natural(Wt, Xt)
S_hat_naturalt = W_naturalt%*%Xt
cor(t(S_hat_natural3), t(S3))
plot(1:18000, S_hat_naturalt[1,], type = 'l', main = 's_hat bird', xlab = 't', ylab = 'value')
plot(1:18000, S_hat_naturalt[2,], type = 'l', main = 's_hat halleluja', xlab = 't', ylab = 'value')
plot(1:18000, S_hat_naturalt[3,], type = 'l', main = 's_hat source 3 t distributed', xlab = 't', ylab = 'value')
#play(audioSample(t(as.matrix(S_hat_natural3[1,])), rate = 8192))
#play(audioSample(t(as.matrix(S_hat_natural3[2,])), rate = 8192))
#play(audioSample(t(as.matrix(S_hat_natural3[3,])), rate = 8192))
# natural Gradient
t = 1
eta_t = 0.25
alpha = 1
lambda = 0.91 #0.9102
set.seed(9991)
Wt = matrix(runif(9, 0, 1), ncol = 3)
W_naturalt = unmixing_natural(Wt, Xt)
S_hat_naturalt = W_naturalt%*%Xt
cor(t(S_hat_natural3), t(S3))
par(mfrow=c(2,2))
plot(1:18000, S_hat_naturalt[1,], type = 'l', main = 's_hat bird', xlab = 't', ylab = 'value')
plot(1:18000, S_hat_naturalt[2,], type = 'l', main = 's_hat halleluja', xlab = 't', ylab = 'value')
plot(1:18000, S_hat_naturalt[3,], type = 'l', main = 's_hat source 3 t distributed', xlab = 't', ylab = 'value')
#play(audioSample(t(as.matrix(S_hat_natural3[1,])), rate = 8192))
#play(audioSample(t(as.matrix(S_hat_natural3[2,])), rate = 8192))
#play(audioSample(t(as.matrix(S_hat_natural3[3,])), rate = 8192))
M = matrix(1, ncol = 3, nrow = 4)
set.seed(14321)
#Laplace
b <- 1
mean <- 0
S_l <- rlaplace(nrow(s1),mean,b)
#normal
s3 <- rnorm(nrow(s1),0,((sd(as.matrix(s1)) + sd(as.matrix(s2)))/2))
#Uniform
a = 0
b = 1
S_uni <- runif(nrow(s1),a,b)
par(mfrow=c(2,2))
hist(S_l, main = "Histogram of Laplace Sample")
hist(s3, main = "Historgram of Normal Distribution")
hist(S_uni, main = "Histogram of Uniform Distribution")
M = matrix(1, ncol = 3, nrow = 4)
first_moment <- function(x){
return(sum(x)/(length(x)))
}
M[1,1] <- round(first_moment(S_l),1)
M[1,2] <- round(first_moment(s3),1)
M[1,3] <- round(first_moment(S_uni),1)
M[1,]
second_moment <- function(x){
return(sum((x-mean(x))^2)/length(x))
}
M[2,1] <- round(second_moment(S_l),1)
M[2,2] <- round(second_moment(s3),1)
M[2,3] <- round(second_moment(S_uni),1)
M[2,]
second_moment <- function(x){
return(sum((x-mean(x))^2)/length(x))
}
M[2,1] <- round(second_moment(S_l),1)
M[2,2] <- round(second_moment(s3),1)
M[2,3] <- round(second_moment(S_uni),1)
M[2,]
third_moment <- function(x){
return((sum((x-mean(x))^3)/length(x))/((sum((x-mean(x))^2)/length(x))^(3/2)))
}
M[3,1] <- round(third_moment(S_l),1)
M[3,2] <- round(third_moment(s3),1)
M[3,3] <- round(third_moment(S_uni),1)
M[3,]
vier_moment <- function(x){
return((sum((x-mean(x))^4)/length(x))/((sum((x-mean(x))^2)/length(x))^(4/2)))
}
M[4,1] <- round(vier_moment(S_l),1)
M[4,2] <- round(vier_moment(s3),1)
M[4,3] <- round(vier_moment(S_uni),1)
M[4,]
M
l = readMat("hw6/distrib.mat")
s1 = l[[1]]
s2 = l[[2]]
s3 = l[[3]]
A = matrix(4:1, ncol = 2, byrow = TRUE)
x1 = A%*%s1
x2 = A%*%s2
x3 = A%*%s3
x1[1,] = x1[1,] - mean(x1[1,])
x1[2,] = x1[2,] - mean(x1[2,])
x2[1,] = x2[1,] - mean(x2[1,])
x2[2,] = x2[2,] - mean(x2[2,])
x3[1,] = x3[1,] - mean(x3[1,])
x3[2,] = x3[2,] - mean(x3[2,])
pcs1 = eigen(cov(t(x1)))$vectors
pcs2 = eigen(cov(t(x2)))$vectors
pcs3 = eigen(cov(t(x3)))$vectors
evals1 = eigen(cov(t(x1)))$values
evals2 = eigen(cov(t(x2)))$values
evals3 = eigen(cov(t(x3)))$values
proj1 = t(x1) %*% pcs1
proj2 = t(x2) %*% pcs2
proj3 = t(x3) %*% pcs3
round(cov((proj1)), 5)
round(cov((proj2)), 5)
round(cov((proj3)), 5)
proj1_w = t(x1) %*% pcs1 %*% diag(evals1^(-.5))
proj2_w = t(x2) %*% pcs2 %*% diag(evals2^(-.5))
proj3_w = t(x3) %*% pcs3 %*% diag(evals3^(-.5))
round(cov((proj1_w)), 5)
round(cov((proj2_w)), 5)
round(cov((proj3_w)), 5)
rotation_matrix = function(theta){
return(matrix(c(cos(theta), -sin(theta), sin(theta), cos(theta)), ncol = 2, byrow = TRUE))
}
thetas = seq(0, 2*pi, pi/50)
kurt = function(x){
k = 1/length(x)*sum(x^4) - 3
return(k)
}
kurt_rotation = function(x, thetas){
k_mat = matrix(nrow = length(thetas), ncol = 2)
i = 1
if(nrow(x) > ncol(x)){
x = t(x)
}
for(t in thetas){
R = rotation_matrix(t)
x_theta = t(R%*%x)
k = apply(x_theta, 2, kurt)
k_mat[i,] = k
i = i + 1
}
return(k_mat)
}
k_after_rotation1 = kurt_rotation(proj1_w, thetas)
k_after_rotation2 = kurt_rotation(proj2_w, thetas)
k_after_rotation3 = kurt_rotation(proj3_w, thetas)
max1 = which.max(k_after_rotation1[,1])
max2 = which.max(k_after_rotation2[,1])
max3 = which.max(k_after_rotation3[,1])
R1 = rotation_matrix(thetas[max1])
R2 = rotation_matrix(thetas[max2])
R3 = rotation_matrix(thetas[max3])
proj1_w_rotated = R1 %*% t(proj1_w)
proj2_w_rotated = R2 %*% t(proj2_w)
proj3_w_rotated = R3 %*% t(proj3_w)
m <- rbind(c(1, 2), c(1, 3))
layout(m, widths = 1)
plot(s1[1,], s1[2,], col = alpha("blue", .3), pch = 16,
main = "Normal (original sources)", xlab = "s1", ylab = "s2")
hist(s1[1,], main = "Normal s1 original", xlab = "")
hist(s1[2,], main = "Normal s2 original", xlab = "")
plot(proj1_w_rotated[1,], proj1_w_rotated[2,], col = alpha("blue", .3), pch = 16,
main = "Normal (whitened & rotated)", xlab = "s1", ylab = "s2")
hist(proj1_w_rotated[1,], main = "Normal s1 whitened & rotated", xlab = "")
hist(proj1_w_rotated[2,], main = "Normal s2 whitened & rotated", xlab = "")
plot(s2[1,], s2[2,], col = alpha("blue", .3), pch = 16,
main = "Laplace (original sources)", xlab = "s1", ylab = "s2")
hist(s2[1,], main = "Laplace s1 original", xlab = "")
hist(s2[2,], main = "Laplace s2 original", xlab = "")
plot(proj2_w_rotated[1,], proj2_w_rotated[2,], col = alpha("blue", .3), pch = 16,
main = "Laplace (whitened & rotated)", xlab = "s1", ylab = "s2")
hist(proj2_w_rotated[1,], main = "Laplace s1 whitened & rotated", xlab = "")
hist(proj2_w_rotated[2,], main = "Laplace s2 whitened & rotated", xlab = "")
plot(s3[1,], s3[2,], col = alpha("blue", .3), pch = 16,
main = "Uniform (original sources)", xlab = "s1", ylab = "s2")
hist(s3[1,], main = "Uniform s1 original", xlab = "")
hist(s3[2,], main = "Uniform s2 original", xlab = "")
plot(proj3_w_rotated[1,], proj3_w_rotated[2,], col = alpha("blue", .3), pch = 16,
main = "Uniform (whitened & rotated)", xlab = "s1", ylab = "s2")
hist(proj3_w_rotated[1,], main = "Uniform s1 whitened & rotated", xlab = "")
hist(proj3_w_rotated[2,], main = "Uniform s2 whitened & rotated", xlab = "")
par(mfrow = c(2,2))
min1 = which.min(k_after_rotation1[,1])
min2 = which.min(k_after_rotation2[,1])
min3 = which.min(k_after_rotation3[,1])
R_min1 = rotation_matrix(thetas[min1])
R_max1 = rotation_matrix(max1)
R_min2 = rotation_matrix(thetas[min2])
R_max2 = rotation_matrix(max2)
R_min3 = rotation_matrix(thetas[min3])
R_max3 = rotation_matrix(max3)
proj1_w_rotated_max = R_max1 %*% t(proj1_w)
proj2_w_rotated_max = R_max2 %*% t(proj2_w)
proj3_w_rotated_max = R_max3 %*% t(proj3_w)
proj1_w_rotated_min = R_min1 %*% t(proj1_w)
proj2_w_rotated_min = R_min2 %*% t(proj2_w)
proj3_w_rotated_min = R_min3 %*% t(proj3_w)
hist(proj1_w_rotated_max[1,], main = "Normal s1 theta_max", xlab = "")
hist(proj1_w_rotated_max[2,], main = "Normal s2 theta_max", xlab = "")
hist(proj1_w_rotated_min[1,], main = "Normal s1 theta_min", xlab = "")
hist(proj1_w_rotated_min[2,], main = "Normal s2 theta_min", xlab = "")
hist(proj2_w_rotated_max[1,], main = "Laplace s1 theta_max", xlab = "")
hist(proj2_w_rotated_max[2,], main = "Laplace s2 theta_max", xlab = "")
hist(proj2_w_rotated_min[1,], main = "Laplace s1 theta_min", xlab = "")
hist(proj2_w_rotated_min[2,], main = "Laplace s2 theta_min", xlab = "")
hist(proj3_w_rotated_max[1,], main = "Uniform s1 theta_max", xlab = "")
hist(proj3_w_rotated_max[2,], main = "Uniform s2 theta_max", xlab = "")
hist(proj3_w_rotated_min[1,], main = "Uniform s1 theta_min", xlab = "")
hist(proj3_w_rotated_min[2,], main = "Uniform s2 theta_min", xlab = "")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "/Users/maxand22/Google Drive/Humboldt/4. Semester/Machine Intelligence II/Machine_Intelligence_II/")
knitr::opts_chunk$set(error = TRUE)
knitr::opts_chunk$set(tidy.opts=list(width.cutoff=60),tidy=TRUE)
#install.packages("jpeg")
library(jpeg)
#install.packages("fastICA")
library(fastICA)
#install.packages("reshape2")
library(reshape2)
#install.packages("ggplot2")
library(ggplot2)
#install.packages("gridExtra")
library(gridExtra)
library(audio)
#install.packages("psych")
library(psych)
get_patch <- function(matrix, h, w, return_vector = FALSE){
h <- h-1
w <- w-1
n <- nrow(matrix)
p <- ncol(matrix)
h_sample <- sample(1:n, 1, FALSE)
w_sample <- sample(1:p, 1, FALSE)
if((h_sample + h) > n) {
h_patch <- (h_sample - h):h_sample
}else{
h_patch <- h_sample:(h_sample + h)
}
if((w_sample + w) > p) {
w_patch <- (w_sample - w):w_sample
}else{
w_patch <- w_sample:(w_sample + w)
}
if(return_vector == FALSE){ return(matrix[h_patch, w_patch])
}else{
return(as.vector(matrix[h_patch, w_patch]))
}
}
heatmap_custom <- function(matrix){
g1 <- ggplot(data = matrix, aes(x=Var1, y=Var2, fill=value)) +
geom_tile() +
scale_fill_continuous(low = "white", high = "black") + guides(fill = FALSE) + theme(axis.title.x=element_blank(),
axis.text.x=element_blank(), axis.ticks.x=element_blank(), axis.title.y=element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank())
return(g1)
}
norm_vec <- function(x) sqrt(sum(x^2))
g1 <- function(x) {tanh(x)}
# whitened Data: Z
Z <- t(Zt)
# initialize mixing Matrix A and compute Mixed Signal X
set.seed(1234)
A = matrix(runif(4, 0, 1), nrow = 2)
#mixted signals
X = A%*%Z
### Load Data
s1 = read.table("hw5/sound1.dat", header=FALSE)
s2 = read.table("hw5/sound2.dat", header=FALSE)
S = t(as.matrix(data.frame(s1,s2)))
# whiten S
St <- t(S)
covS <- cov(scale(St, center = TRUE, scale = FALSE))
ev <- eigen(covS)$vectors
eval <- eigen(covS)$values
Zt = scale(St, center = TRUE, scale = FALSE) %*% ev %*% diag((eval)^-0.5)
cov(Zt)
# whitened Data: Z
Z <- t(Zt)
# initialize mixing Matrix A and compute Mixed Signal X
set.seed(1234)
A = matrix(runif(4, 0, 1), nrow = 2)
#mixted signals
X = A%*%Z
# init random vector with length 1
vec <- matrix(c(0,1), nrow = 2, ncol = 1)
# inital learning rate
eta <- 0.01
for(i in 1:18000){
eta <- eta*0.9999
deltaVec <- eta*(-1) * X[,i] * g1(t(vec)%*%X[,i])
vec <- vec + deltaVec
vec <- vec/norm_vec(vec)
}
#check
shat <- t(vec) %*% X
plot(t(shat), type = 'l')
plot(1:18000, t(s1),type = 'l')
plot(1:18000, t(s2),type = 'l')
play(audioSample(as.matrix(shat), rate = 8192))
# init random matrix (two orthogonal vectors, each with length 1)
set.seed(123)
b1 <- matrix(runif(2, min = 0, max = 1), nrow = 2, ncol = 1)
b1 <- b1/norm_vec(b1)
b2 <- matrix(c(1, (-b1[2]/b1[1])), nrow = 2, ncol = 1)
b2 <- b2/norm_vec(b2)
#initialized unmixing matrix
B <- cbind(b1,b2)
# inital learning rate
eta2 <- 0.01
for(i in 1:18000){
#learning rate
eta2 <- eta2*0.9999
#update b1
deltaB1 <- eta2*(-1) * X[,i] * g1(t(b1)%*%X[,i])
b1 <- b1 + deltaB1
#update b2
deltaB2 <- eta2*(-1) * X[,i] * g1(t(b2)%*%X[,i])
b2 <- b2 + deltaB2
#recalculate B
B <- cbind(b1,b2)
#normalize B
maxNorm <- max(norm_vec(b1), norm_vec(b2))
B <- B/maxNorm
#decorrelate: FUNKTIONIERT NICHT! B danach linear abh?ngig
Q <- eigen(cov(B%*%t(B)))$vectors
EV <- eigen(cov(B%*%t(B)))$values
Lambda <- diag(EV^-0.5)
B <- Q %*% Lambda %*% t(Q) %*% B
#normalize B
#b1 <- B[,1]
#b2 <- B[,2]
#maxNorm <- max(norm_vec(b1), norm_vec(b2))
#B <- B/maxNorm
#b1 <- b1/norm_vec(b1)
#b2 <- b2/norm_vec(b2)
#B <- ((B%*%t(B))^-.5) %*% B
}
B
f_b = file.path("hw7/imgpca/buildings", list.files("hw7/imgpca/buildings"))
f_b = file.path("hw7/imgpca/buildings", list.files("hw7/imgpca/buildings"))
f_n = file.path("hw7/imgpca/nature", list.files("hw7/imgpca/nature"))
f_t = file.path("hw7/imgpca/text", list.files("hw7/imgpca/text"))
b_img = lapply(f_b, readJPEG)
path <- "/Users/maxand22/Google Drive/Humboldt/4. Semester/Machine Intelligence II/Machine_Intelligence_II/hw7/imgpca"
fn <- file.path(path, c("n1.jpg","n2.jpg", "n3.jpg", "n4.jpg", "n5.jpg", "n6.jpg", "n7.jpg", "n8.jpg", "n9.jpg", "n10.jpg","n11.jpg","n12.jpg","n13.jpg"))
n <- lapply(fn, readJPEG)
fb <- file.path(path, c("b1.jpg","b2.jpg", "b3.jpg", "b4.jpg", "b5.jpg", "b6.jpg", "b7.jpg", "b8.jpg", "b9.jpg", "b9_2.jpg","b9_4.jpg","b9_8.jpg","b9_16.jpg","b10.jpg"))
b <- lapply(fb, readJPEG)
ft <- file.path(path, c("t1.jpg","t2.jpg", "t3.jpg", "t4.jpg", "t5.jpg", "t6.jpg", "t7.jpg", "t8.jpg", "t9.jpg", "t10.jpg","t11.jpg","t12.jpg","t13.jpg","t14.jpg"))
t <- lapply(ft, readJPEG)
f_n = file.path("hw7/imgpca/nature", list.files("hw7/imgpca/nature"))
f_t = file.path("hw7/imgpca/text", list.files("hw7/imgpca/text"))
b_img = lapply(f_b, readJPEG)
n_img = lapply(f_n, readJPEG)
t_img = lapply(f_t, readJPEG)
P = 20000
N = 144
N_root = sqrt(N)
# helper function for patches
get_patch <- function(matrix, h, w, return_vector = FALSE){
h <- h-1
w <- w-1
n <- nrow(matrix)
p <- ncol(matrix)
h_sample <- sample(1:n, 1, FALSE)
w_sample <- sample(1:p, 1, FALSE)
if((h_sample + h) > n) {
h_patch <- (h_sample - h):h_sample
}else{
h_patch <- h_sample:(h_sample + h)
}
if((w_sample + w) > p) {
w_patch <- (w_sample - w):w_sample
}else{
w_patch <- w_sample:(w_sample + w)
}
if(return_vector == FALSE){
return(matrix[h_patch, w_patch])
}else{
return(as.vector(matrix[h_patch, w_patch]))
}
}
# a) ----------------------------------------------------------------------
patches_b = matrix(nrow = P, ncol = N)
j = 1
for(i in 1:P){
patches_b[i,] = get_patch(b_img[[j]], N_root, N_root, return_vector = TRUE)
if (j == length(b_img)){
j = 1
}
}
f_b = file.path("/Users/maxand22/Google Drive/Humboldt/4. Semester/Machine Intelligence II/Machine_Intelligence_II/hw7/imgpca/buildings", list.files("hw7/imgpca/buildings"))
b_img = lapply(f_b, readJPEG)
P = 20000
N = 144
N_root = sqrt(N)
get_patch <- function(matrix, h, w, return_vector = FALSE){
h <- h-1
w <- w-1
n <- nrow(matrix)
p <- ncol(matrix)
h_sample <- sample(1:n, 1, FALSE)
w_sample <- sample(1:p, 1, FALSE)
if((h_sample + h) > n) {
h_patch <- (h_sample - h):h_sample
}else{
h_patch <- h_sample:(h_sample + h)
}
if((w_sample + w) > p) {
w_patch <- (w_sample - w):w_sample
}else{
w_patch <- w_sample:(w_sample + w)
}
if(return_vector == FALSE){
return(matrix[h_patch, w_patch])
}else{
return(as.vector(matrix[h_patch, w_patch]))
}
}
# a) ----------------------------------------------------------------------
patches_b = matrix(nrow = P, ncol = N)
j = 1
for(i in 1:P){
patches_b[i,] = get_patch(b_img[[j]], N_root, N_root, return_vector = TRUE)
if (j == length(b_img)){
j = 1
}
}
N <- sqrt(144)
P <- 20000
matrix_n <- matrix(nrow = 0, ncol = N*N)
matrix_b <- matrix(nrow = 0, ncol = N*N)
matrix_t <- matrix(nrow = 0, ncol = N*N)
set.seed(123)
for(i in 1:length(n)){
tmp1 <- t(replicate(2000, get_patch(n[[i]], N, N, return_vector = TRUE), simplify = "vector"))
matrix_n <- rbind(matrix_n, tmp1)
}
for(i in 1:length(b)){
tmp1 <- t(replicate(2000, get_patch(b[[i]], N, N, return_vector = TRUE), simplify = "vector"))
matrix_b <- rbind(matrix_b, tmp1)
}
for(i in 1:length(t)){
tmp1 <- t(replicate(2000, get_patch(t[[i]], N, N, return_vector = TRUE), simplify = "vector"))
matrix_t <- rbind(matrix_t, tmp1)
}
#The required 20000 samples were reached
P < nrow(matrix_n)+nrow(matrix_b)+nrow(matrix_t)
dim(matrix_t)
set.seed(1234)
a_n <- fastICA(matrix_n, N*N, fun = "logcosh", alpha = 1)
a_b <- fastICA(matrix_b, N*N, fun = "logcosh", alpha = 1)
a_t <- fastICA(matrix_t, N*N, fun = "logcosh", alpha = 1)
